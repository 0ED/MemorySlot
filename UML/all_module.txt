【ベットモジュール（BetModelクラス）】
メソッド名：BetModel
引数：なし
戻り値：なし
概要：Betするチップの初期化（clearChipを実行する）。

メソッド名：addChip
引数：整数
戻り値：なし
概要：Betするチップを追加する。

メソッド名：getChip
引数：整数
戻り値：なし
概要：Betしたチップを返す

メソッド名：clearChip
引数：なし
戻り値：なし
概要：Betしたチップを0にする


【ベットモジュール（BetViewクラス）】
メソッド名：BetView
引数：BetModel
戻り値：なし
概要：「Betするためのチップラベル（$1、$5、$10、$25 ：チップは画像で表示）」と「クリアボタン」を表示する。

メソッド名：addToLabelMouseListener
引数： MouseListener
戻り値：なし
概要：「Betするためのチップラベル」にMouseListenerを設定する。（コントローラから設定する）

メソッド名：addToButtonActionListener
引数： ActionListener
戻り値：なし
概要：「クリアボタン」にActionListenerを設定する。（コントローラから設定する）

メソッド名：paint
引数：Graphics
戻り値：なし
概要：「Betするためのチップラベル」か「クリアボタン」が押されたとき呼び出される。ModelからgetChipで「Betしたチップ」を参照し、それをString型に変換後、Betした金額（テキスト表示）を再描画する。


【ベットモジュール（BetControlクラス）】
メソッド名：BetControl
引数：BetModel, BetView
戻り値：なし
概要：「クリアボタン」と「Betのするためのチップラベル」にそれぞれActionListenerとMouseListenerを加える。

メソッド名：mouseClicked
引数：MouseEvent
戻り値：なし
概要：各Chipのボタン（$1、$5、$10、$25）のどれかを押すと呼び出され、そのボタンの金額に応じて、ModelからBetを加算する。このとき、Mediatorに通知（removeScoreByBet）し、スコアを下げてもらう。そして、Viewからrepaintで再描画する。

メソッド名：actionPerformed
引数： ActionEvent
戻り値：なし
概要：クリアのボタンを押すと呼び出され、ModelからBetを0にする。そして、Viewからrepaintで再描画する。

メソッド名：setMediator
引数：Mediator
戻り値：なし
概要：Mediator実装クラスからTrumpAreaを経由してこのメソッドを呼び出し、Mediatorをセットする。



【ボードモジュール（BoardViewクラス）】
メソッド名：BoardView
引数：なし
戻り値：なし
概要：画像を読み込み、その画像を表示する。これがメインの背景画像となる。

メソッド名：installBoardImage
引数：なし
戻り値：なし
概要：イメージ画像を読み込んで保存しておく

メソッド名：paint
引数：Graphics
戻り値：なし
概要：読み込んだ背景画像を描画する


【ボードモジュール（StartBoardViewクラス）】
メソッド名：StartBoardView
引数：なし
戻り値：なし
概要：スタートボタンとルール説明ボタンを配置し、位置をセットする。

メソッド名：addToButtonActionListener
引数：ActionListener
戻り値：なし
概要：スタートボタンとルール説明ボタンにActionListenerを取り付ける。コントローラから呼び出す。


【ボードモジュール（StartBoardControlクラス）】
メソッド名：StartBoardControl
引数：MemorySlot, StartBoardView
戻り値：なし
概要：Viewからスタートボタンとルール説明ボタンにActionListenerを設置する。

メソッド名：actionPerformed
引数：ActionEvent
戻り値：なし
概要：スタートまたはルールボタン説明のボタンを押したとき、受け取る。


【ボードモジュール（GameBoardViewクラス）】
メソッド名：GameBoardView
引数：なし
戻り値：なし
概要：ベット、スコア、スロット、確率分布、トランプをここに置き、スーパークラスのレイヤー機能（JLayeredPane）を使って配置する。（このクラスはMediatorの実装クラス）

メソッド名：clearBetChip
引数：なし
戻り値：なし
概要：スートが2枚そろったときに呼び出され、ベットをクリアし、再描画する。

メソッド名：restoreScore
引数：なし
戻り値：なし
概要：ベットをクリアするときに呼び出され、ベットした金額を取り戻す。

メソッド名：removeScore
引数：なし
戻り値：なし
概要：ベットが追加されると呼び出され、スコアをベットしたチップの分だけ減らし、再描画する。

メソッド名：happenCardEvent
引数：TrumpModel[2], String
戻り値：なし
概要：トランプが2枚オープンされたときに呼び出される。トランプの組み合わせによって、それぞれのイベントがおこる。

スートが同じ（このことをフラッシュという）なら、以前にそのトランプの組み合わせがあったかcheckNewTrumpCombinationメソッドで確認し、なければスロットの確率をあげる。

トランプのランクが1または10,11,12,13（このことをブラックジャックという）なら、以前にそのトランプの組み合わせがあったか確認し、なければスロットの確率をあげる。

ランクが同じ（このことをスロットという）なら、スロットを開始し、スロットの確率をクリアにし、スコアをベットの2倍分追加する。

	また、イベントが起こると、確率が変動するので、確率分布を再描画する。

メソッド名：hitSlot
引数：整数
戻り値：なし
概要：スロットのマークがそろったとき呼び出される。0なら、スコアが2倍になる。1ならスロットがもう一度行われ、$1500上昇。2ならスコアが$2000上昇。3なら、ランクのペアを2枚光らせ、$800上昇。4ならランダムでランクのペアを４枚光らせ、$500上昇。5なら、ランダムでスートのペアを４枚光らせ、$500上昇。6ならスロットがもう一度行われ、$200上昇。

メソッド名：sleep
引数：整数
戻り値：なし
概要：スレッドを使って、指定した時間スリープする。

メソッド名：checkNewTrumpCombination
引数：TrumpModel,  TrumpModel
戻り値：なし
概要：2枚のトランプの組み合わせがフラッシュかブラックジャックのとき、呼び出され、新しい組み合わせならTrue、そう出なければFalseを返す。組み合わせを記憶しておくのはtrumpCombinationMap（HashMap）



【統合モジュール（Mediatorインタフェース）】
Mediatorの実装クラスはGameBoardViewクラス

メソッド名：clearBetChip
引数：なし
戻り値：なし

メソッド名：removeScoreByBet
引数：なし
戻り値：なし

メソッド名：happenCardEvent
引数：TrumpModel[2], String
戻り値：なし

メソッド名：hitSlot
引数：整数
戻り値：なし

【統合モジュール（Colleagueインタフェース）】
メソッド名：setMediator
引数：Mediator
戻り値：なし



 基盤モジュール（MemorySlotクラス）
 メソッド名：MemorySlot
 引数：なし
 戻り値：なし
 概要：メインオブジェクト。ゲームフレームを作成し、スタートボードとメニューバーを作る。

 メソッド名：startGame
 引数：なし
 戻り値：なし
 概要：ゲームをスタートする。スタート画面を消し、ゲーム画面を挿入する。

 メソッド名：resetGame
 引数：なし
 戻り値：なし
 概要：ゲームをリセットする。ゲーム画面を消し、スタート画面を挿入する。



【メニューバーモジュール（MenuBarViewクラス）】
メソッド名：MenuBarView
引数：なし
戻り値：なし
概要：メニューバー、メニュー、アイテムの作成を行い、表示する。MemorySlotのフレームの上にのせる。

メソッド名：makeMenuAndItem
引数：なし
戻り値：なし
概要：メニューとアイテムのオブジェクトを作成する

メソッド名：setBackColorToMenuBar
引数：なし
戻り値：なし
概要：メニュー、メニューバー、アイテムの色を設定する

メソッド名：setShortKeyToItem
引数：なし
戻り値：なし
概要：ショートカットを設定する

メソッド名：insertItemToMenuBar
引数：なし
戻り値：なし
概要：アイテムとメニューをメニューバーに挿入する

メソッド名：addToItemActionListener
引数：ActionEvent
戻り値：なし
概要：メニューのアイテムにそれぞれActionListenerを取り付ける。コントローラからアクセスできるようにする。


【メニューバーモジュール（MenuBarControlクラス）】
メソッド名：MenuBarControl
引数：MenuBarView
戻り値：なし
概要：MenuBarViewに対して、指示を出す。

メソッド名：ActionPerformed
引数：ActionEvent
戻り値：なし
概要：メニューアイテムを押したときに呼び出され、それぞれクリックしたとき、反応が起きる。ルール説明を押すと、ルールを説明するフレームが出てきて、リセットを押すとスタート画面に戻り、終了を押すとゲームが終わり、ウィンドウが閉じる。



【基礎モジュール（Ruleクラス）】
メソッド名：Rule
引数：なし
戻り値：なし
概要：ルール説明のためのフレーム。メニューバーのMemorySlotのルール説明をクリックするか、スタート画面のルール説明をクリックすると呼び出される。



【スコアモジュール（ScoreModelクラス）】
メソッド名：ScoreModel
引数：整数
戻り値：なし
概要：最初のスコアを設定する。

メソッド名：addScore
引数：整数
戻り値：なし
概要：引数に与えられた数だけスコアを増やす。

メソッド名：removeScore
引数：整数
戻り値：なし
概要：引数に与えられた数だけスコアを減らす。

メソッド名：getScore
引数：なし
戻り値：整数
概要：手に入れたスコアを返す

メソッド名：getChipsCount
引数：なし
戻り値：整数配列（1次元で6個分）
概要：スコアボードに、チップをはみ出ることなく表示させるために、今のスコアを基に、各チップ（$1, $5, $10, $25, $50, $100の6種）の数を調整し、各チップ何枚ずつに振り分けるかを返す。


【スコアモジュール（ScoreViewクラス）】
メソッド名：ScoreView
引数：ScoreModel
戻り値：なし
概要：ボードとチップの画像をインストールし、モデルクラスを受け取る。

メソッド名：paint
引数：なし
戻り値：なし
概要：スコアを可視化できるように、下中央に獲得したチップを描画する。このとき、ModelからgetChipCountを基にチップを配置する。

メソッド名：installScoreChipImage
引数：なし
戻り値：なし
概要：チップに使う画像イメージ[3][6]を保存する。チップの種類は$1, $5, $10, $25, $50, $100となっており、各チップに3種類の向きがある。

メソッド名：installScoreBoardImage
引数：なし
戻り値：Image
概要：獲得したチップを置くためのボードの画像イメージを保存する。


【スコアモジュール（ScoreControlクラス）】
メソッド名：ScoreControl
引数：ScoreModel, ScoreView
戻り値：なし
概要：モデルクラスとビュークラスを受け取る。



【スロットモジュール（SlotModelクラス）】
メソッド名：addProbabilityLevel1
引数：整数
戻り値：なし
概要：確率のレベル（段階）を増やす。ここでの確率のレベルとは、1段階上がるごとにスロットのそろう確率が数%上がるものである。ここでは1段階確率の段階が上がる。

メソッド名：addProbabilityLevel2
引数：整数
戻り値：なし
概要：確率のレベル（段階）を増やす。ここでの確率のレベルとは、1段階上がるごとにスロットのそろう確率が数%上がるものである。ここでは2段階確率の段階が上がる。

メソッド名：clearProbabilityLevel
引数：なし
戻り値：なし
概要：スロットの確率のレベルをクリアする

メソッド名：getRandomSlotMark
引数：なし
戻り値：int[3]
概要：スロットの確率レベル（段階）を基に乱数を発生させ、確率レベルが高いほど、当たり目がでるようにスロットのマークを割り出し、返す。

メソッド名：getProbabilityString
引数：なし
戻り値：String[7]
概要：確率のレベル（段階）から、それぞれのスロットのマーク（7種）がそろう確率が何%になるかを求め、それを描画する用にString型（7種）に変換し、返す。


【スロットモジュール（SlotViewクラス）】
メソッド名：SlotView
引数：SlotModel
戻り値：スロットボードイメージと初期のスロットのマーク画像をインストールする。

メソッド名：paint
引数：なし
戻り値：なし
概要：インストールされた画像イメージを基に、スロットボード、スロットのマークを描画する。

メソッド名：installSlotMarkImage
引数：整数[3]
戻り値：なし
概要：3つの整数に対応したスロットのマークの画像イメージを保存する。

メソッド名：installSlotBoardImage
引数：なし
戻り値：なし
概要：スロットボードの画像イメージを保存する。


【スロットモジュール（ProbabilityViewクラス）】
メソッド名：ProvabilityView
引数：SlotModel
戻り値：なし
概要：スロットのマークの画像をインストールする。

メソッド名：paint
引数：なし
戻り値：なし
概要：左中央に設置する確率分布を描画する。インストールされた画像の表示とgetProbabilityStringから取得した確率の表示を行う。

メソッド名：installSlotMarkImage
引数：なし
戻り値：なし
概要：左中央に設置する確率分布を表示するための画像イメージを保存する。


【スロットモジュール（SlotControlクラス）】
メソッド名：SlotControl
引数：SlotModel, SlotView, ProbabilityView
戻り値：なし
概要：SlotModel, SlotView, ProbabilityViewを設定する。

メソッド名：startSlot
引数：なし
戻り値：なし
概要：Mediatorから呼び出さる。ModelからgetRandomSlotMarkでスロットのマーク（int[3]）を決め、Viewからそのスロットのマーク（int[3]）をinstallSlotMarkImageで画像を読み込み、再描画する。また、スロットマークがそろったときMediatorのhitSlotを呼び出す。



【トランプモジュール（TrumpModelクラス）】
メソッド名：TrumpModel
引数：整数, 整数
戻り値：なし
概要：トランプの初期設定。引数のスートとランクを設定し、トランプを裏向けにする。（open=falseで裏向きに）

メソッド名：setOpen
引数：真偽
戻り値：なし
概要： このトランプが表（true）か裏か（false）を設定する。

メソッド名：getOpen
引数：なし
戻り値：真偽
概要：このトランプが表（true）か裏か（false）を返す。

メソッド名：getSuit
引数：なし
戻り値：整数
概要：このトランプのスートを返す

メソッド名：getRank
引数：なし
戻り値：整数
概要：このトランプのランクを返す


【トランプモジュール（TrumpViewクラス）】
メソッド名：TrumpView
引数： TrumpModel
戻り値：なし
概要：Modelからこのトランプのsuitとrankが何かを参考にして、トランプイメージをインストールする。

メソッド名：paint
引数： なし
戻り値：なし
概要：インストールしたこのトランプの画像イメージを描画する。Modelから、カードの表裏を求め、カードが表なら表の画像を描画し、裏なら裏の画像を描画する。

メソッド名：addToTrumpMouseListener
引数： MouseListener
戻り値：なし
概要：このトランプにMouseListenerを設定する。（コントローラから設定する）

メソッド名：installTrumpImage
引数： 整数、整数
戻り値：なし
概要：引数のスートとランクを基に、トランプの表面の画像と裏面の画像を読み込み、イメージ画像として保存する。


【トランプモジュール（TrumpAreaViewクラス）】
メソッド名：TrumpAreaView
引数：なし
戻り値：なし
概要：TrumpModelとTrumpViewを宣言し、トランプを配置する。


【トランプモジュール（TrumpControlクラス）】
メソッド名：TrumpControl
引数： TrumpModel[][], TrumpView[][] //[4][13]
戻り値：なし
概要：トランプをシャッフルしセットする。このとき、ModelとViewの配列を[4][13]から[10][6]に変換するが、変換後の中央の縦2マス、横4マスの範囲はスロットを置く場所のための場所で、この部分はnullにしておく。
また、ViewからsetBoundsを設定し、トランプにMouseListenerを設定する。

メソッド名：shuffle
引数：なし
戻り値：Point型
概要：トランプの配置をランダムに振り分け、セットする座標を返す。

メソッド名：mouseClicked
引数：MouseEvent
戻り値：なし
概要：トランプをマウスがクリックしたとき、呼び出される。トランプがクローズなら、トランプをオープン状態にし、再描画する。そして、clickTrumpModel[2]（オープンしたカードの情報が入ってる）のどちらかがnullなら、そのスペースにカード情報を入れ、どちらもnullでないなら2枚のトランプ情報をMediatorに知らせ、その後clickTrumpModel[2]をどちらともnullにする。



